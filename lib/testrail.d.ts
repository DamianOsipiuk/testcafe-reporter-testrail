/// <reference types="node" />
import qs from "querystring";
import { Options, Reporter, Project, Plan, Suite, Run, Result, NewResult, PlanEntry, Case, NewCase, NewResultByCase, TestResult, Test } from "./interfaces";
declare enum HttpMethod {
    Get = "get",
    Post = "post"
}
export declare class TestRail {
    host: string;
    baseUrl: string;
    authHeader: string;
    logger: Reporter;
    chalk: Reporter["chalk"];
    moment: Reporter["moment"];
    constructor(options: {
        host: string;
        user: string;
        password: string;
    }, reporter: Reporter);
    printError: (error: string) => Promise<void>;
    testConnection: () => Promise<void>;
    getProjectId: (projectName: string, projectId: string) => Promise<number>;
    getPlanId: (planName: string, planId: string, projectId: number) => Promise<number | undefined>;
    getSuiteId: (suiteName: string, suiteId: string, projectId: number) => Promise<number>;
    closeOldRuns: (projectId: number, options: Options) => Promise<void>;
    publishTestResults: (run: Run, results: NewResultByCase[], testResults: TestResult[], options: Options) => Promise<void>;
    publishTestRun: (options: Options, testResults: TestResult[], userAgents: string[]) => Promise<void>;
    _callAPI: <T>(method: HttpMethod, apiUrl: string, queryVariables: qs.ParsedUrlQueryInput | undefined, body?: object | undefined) => Promise<T>;
    apiGet: <T>(apiUrl: string, queryVariables?: qs.ParsedUrlQueryInput | undefined) => Promise<T>;
    apiPost: <T>(apiUrl: string, body?: any, queryVariables?: qs.ParsedUrlQueryInput | undefined) => Promise<T>;
    getCase: (id: number) => Promise<Case>;
    getCases: (project_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Case[]>;
    addCase: (section_id: number, data: NewCase) => Promise<Case>;
    updateCase: (case_id: number, data: NewCase) => Promise<unknown>;
    deleteCase: (case_id: number) => Promise<unknown>;
    getCaseFields: () => Promise<unknown>;
    getCaseTypes: () => Promise<unknown>;
    getConfigs: (project_id: number) => Promise<unknown>;
    addConfigGroup: (project_id: number, data: any) => Promise<unknown>;
    addConfig: (config_group_id: number, data: any) => Promise<unknown>;
    updateConfigGroup: (config_group_id: number, data: any) => Promise<unknown>;
    updateConfig: (config_id: number, data: any) => Promise<unknown>;
    deleteConfigGroup: (config_group_id: number) => Promise<unknown>;
    deleteConfig: (config_id: number) => Promise<unknown>;
    getMilestone: (id: number) => Promise<unknown>;
    getMilestones: (project_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<unknown>;
    addMilestone: (project_id: number, data: any) => Promise<unknown>;
    updateMilestone: (milestone_id: number, data: any) => Promise<unknown>;
    deleteMilestone: (milestone_id: number) => Promise<unknown>;
    getPlan: (id: number) => Promise<unknown>;
    getPlans: (project_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Plan[]>;
    addPlan: (project_id: number, data: any) => Promise<unknown>;
    addPlanEntry: (plan_id: number, data: any) => Promise<PlanEntry>;
    updatePlan: (plan_id: number, data: any) => Promise<unknown>;
    updatePlanEntry: (plan_id: number, entry_id: number, data: any) => Promise<unknown>;
    closePlan: (plan_id: number) => Promise<unknown>;
    deletePlan: (plan_id: number) => Promise<unknown>;
    deletePlanEntry: (plan_id: number, entry_id: number) => Promise<unknown>;
    getPriorities: () => Promise<unknown>;
    getProject: (id: number) => Promise<unknown>;
    getProjects: (filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Project[]>;
    addProject: (data: any) => Promise<unknown>;
    updateProject: (project_id: number, data: any) => Promise<unknown>;
    deleteProject: (project_id: number) => Promise<unknown>;
    getResults: (test_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Result[]>;
    getResultsForCase: (run_id: number, case_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Result[]>;
    getResultsForRun: (run_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Result[]>;
    addResult: (test_id: number, data: NewResult) => Promise<Result>;
    addResultForCase: (run_id: number, case_id: number, data: NewResult) => Promise<Result>;
    addResults: (run_id: number, data: NewResult) => Promise<Result[]>;
    addResultsForCases: (run_id: number, data: {
        results: NewResultByCase[];
    }) => Promise<Result[]>;
    getResultFields: () => Promise<unknown>;
    getRun: (id: number) => Promise<Run>;
    getRuns: (project_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Run[]>;
    addRun: (project_id: number, data: any) => Promise<Run>;
    updateRun: (run_id: number, data: any) => Promise<unknown>;
    closeRun: (run_id: number) => Promise<unknown>;
    deleteRun: (run_id: number) => Promise<unknown>;
    getSection: (id: number) => Promise<unknown>;
    getSections: (project_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<unknown>;
    addSection: (project_id: number, data: any) => Promise<unknown>;
    updateSection: (section_id: number, data: any) => Promise<unknown>;
    deleteSection: (section_id: number) => Promise<unknown>;
    getStatuses: () => Promise<unknown>;
    getSuite: (id: number) => Promise<unknown>;
    getSuites: (project_id: number) => Promise<Suite[]>;
    addSuite: (project_id: number, data: any) => Promise<unknown>;
    updateSuite: (suite_id: number, data: any) => Promise<unknown>;
    deleteSuite: (suite_id: number) => Promise<unknown>;
    getTemplates: (project_id: number) => Promise<unknown>;
    getTest: (id: number) => Promise<Test>;
    getTests: (run_id: number, filters?: qs.ParsedUrlQueryInput | undefined) => Promise<Test[]>;
    getUser: (id: number) => Promise<unknown>;
    getUserByEmail: (email: string) => Promise<unknown>;
    getUsers: () => Promise<unknown>;
    addAttachmentToResult: (result_id: number, filePath: string) => Promise<any>;
}
export {};
